<?php
/**
 * Generated by build/gen_test
 */
use LightnCandy\LightnCandy;
use LightnCandy\Runtime;
use LightnCandy\SafeString;
use PHPUnit\Framework\TestCase;

require_once(__DIR__ . '/test_util.php');

class CompilerTest extends TestCase
{
    public function testOn_getFuncName() {
        $method = new \ReflectionMethod('LightnCandy\Compiler', 'getFuncName');
        $method->setAccessible(true);
        $this->assertEquals('LR::test(', $method->invokeArgs(null, array_by_ref(array(
            array('flags' => array('debug' => 0)), 'test', ''
        ))));
        $this->assertEquals('LR::test2(', $method->invokeArgs(null, array_by_ref(array(
            array('flags' => array('debug' => 0)), 'test2', ''
        ))));
        $this->assertEquals('LR::debug(\'abc\', \'test\', ', $method->invokeArgs(null, array_by_ref(array(
            array('flags' => array('debug' => 1)), 'test', 'abc'
        ))));
    }
    public function testOn_getVariableName() {
        $method = new \ReflectionMethod('LightnCandy\Compiler', 'getVariableName');
        $method->setAccessible(true);
        $this->assertEquals(['$in', 'this'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(null)
        ))));
        $this->assertEquals(['$in[\'true\'] ?? null', '[true]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('true')
        ))));
        $this->assertEquals(['$in[\'false\'] ?? null', '[false]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('false')
        ))));
        $this->assertEquals(['true', 'true'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(-1, 'true')
        ))));
        $this->assertEquals(['false', 'false'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(-1, 'false')
        ))));
        $this->assertEquals(['$in[\'2\'] ?? null', '[2]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('2')
        ))));
        $this->assertEquals(['2', '2'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(-1, '2')
        ))));
        $this->assertEquals(["\$cx['sp_vars']['index'] ?? null", '@[index]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('@index')
        ))));
        $this->assertEquals(["\$cx['sp_vars']['key'] ?? null", '@[key]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('@key')
        ))));
        $this->assertEquals(["\$cx['sp_vars']['first'] ?? null", '@[first]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('@first')
        ))));
        $this->assertEquals(["\$cx['sp_vars']['last'] ?? null", '@[last]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('@last')
        ))));
        $this->assertEquals(['$in[\'"a"\'] ?? null', '["a"]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('"a"')
        ))));
        $this->assertEquals(['"a"', '"a"'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(-1, '"a"')
        ))));
        $this->assertEquals(['$in[\'a\'] ?? null', '[a]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array('a')
        ))));
        $this->assertEquals(['$cx[\'scopes\'][count($cx[\'scopes\'])-1][\'a\'] ?? null', '../[a]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(1,'a')
        ))));
        $this->assertEquals(['$cx[\'scopes\'][count($cx[\'scopes\'])-3][\'a\'] ?? null', '../../../[a]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(3,'a')
        ))));
        $this->assertEquals(['$in[\'id\'] ?? null', 'this.[id]'], $method->invokeArgs(null, array_by_ref(array(
            array('flags'=>array('debug'=>0)), array(null, 'id')
        ))));
    }
}
